mcdp {  
  provides travel_distance [km]
  provides num_missions [R]
  provides carry_payload [g]

  requires total_cost_ownership [$]

  strategy = instance mcdp {
    provides distance [km]
    requires endurance [s]
    requires velocity [m/s]

    distance <= endurance * velocity
  }

  ae = instance load actuation_energetics

  ae.endurance >= strategy.endurance
  ae.velocity >= strategy.velocity
  ae.num_missions >= num_missions
  ae.extra_payload >= carry_payload
  strategy.distance >= travel_distance

  computer = instance mcdp {
    requires power [W]
    provides computation [flops]

    p0 = 1 W
    p1 = 100 W/flops
    power >= p0 + p1 * computation 
  }

  perception = instance template mcdp {
    provides velocity [m/s]
    requires computation [flops]
    requires camera_framerate [Hz]
    requires camera_resolution [pixels/deg]
    requires camera_fov [deg]
    
  }
  computer.computation >= perception.computation


  sensor = instance template mcdp {
    provides framerate [Hz]
    provides resolution [pixels/deg]
    provides fov [deg]
    requires power [W] 
  }

  sensor.resolution >= perception.camera_resolution
  sensor.framerate >= perception.camera_framerate
  sensor.fov >= perception.camera_fov
  
  perception.velocity >= strategy.velocity
  ae.extra_power >= computer.power + sensor.power

  # We can take into account the shipping cost
  shipping = instance  mcdp {
    provides ships [g]
    requires postage [$]

    rate_continental_US  =     0.5 $ / lbs
    rate_low_earth_orbit = 10000.0 $ / lbs
    rate = rate_continental_US
    
    # postage proportional to weight
    postage >= rate * ships
  }
  
  total_mass = ae.total_mass 

  shipping.ships >= total_mass

  total_cost_ownership >= shipping.postage + ae.total_cost
}