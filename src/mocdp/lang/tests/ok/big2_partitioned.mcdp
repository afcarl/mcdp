# test connected
mcdp {  
  sub motor_chassis = instance mcdp {
    sub motor = instance template mcdp {
      provides speed [rad/s]
      provides torque [N*m]
      #    
      requires cost [$]
      requires weight [g]
      requires voltage [V]
      requires current [A]
    }
     #
    sub chassis = instance template mcdp {
      provides payload [g]
      provides velocity [m/s]
      #
      requires cost [$]
      requires total_weight [g]
      requires motor_speed [rad/s]
      requires motor_torque [N*m]

      requires control_function [any]
    }

      
    requires voltage, current for motor
	  requires total_weight for chassis
    requires cost >= chassis.cost + motor.cost
    provides velocity using chassis
    requires control_function for chassis

    torque provided by motor >= motor_torque required by chassis
    speed provided by motor >= motor_speed required by chassis
    
    provides payload [g]
    chassis.payload >= payload + motor.weight
  }
      
  sub MCB = instance template mcdp {
    provides voltage [V]
    provides current [A]
    #    
    requires cost [$]
    requires weight [g]
    requires input_voltage [V]
    requires input_current [A]
  }
  motor_chassis.voltage <= MCB.voltage
  motor_chassis.current <= MCB.current


  #
  sub battery = instance template mcdp {
    provides capacity [J]
    provides voltage [V]
    provides current [A]
    requires cost [$]
    requires weight [g] 
  }

  
  provides velocity using motor_chassis

	
  #

  # "Autonomy" is a placeholder. It provides
  # a control function and requires SWAP resources.
  sub autonomy = instance template mcdp {
    provides control_function [any]
    requires computation_graph [any]
    requires cost [$]
    requires weight [g]
  }
  autonomy.control_function >= motor_chassis.control_function

  sub computation = instance template mcdp {
    provides computation_graph [any]
    requires voltage [V]
    requires current [A]
    requires cost [$]
    requires weight [g]
  }
  autonomy.computation_graph <= computation.computation_graph

  # Co-design constraint: we must carry everything
  motor_chassis.payload >= (battery.weight + MCB.weight 
    + autonomy.weight + computation.weight)

  # Co-design constraint: we must have enough energy on board
  # to last for the duration of the mission
  provides endurance [s]
  
  current = MCB.input_current + computation.current
  voltage = MCB.input_voltage + computation.voltage
  power = current * voltage
  battery.capacity >= endurance * power
  battery.current >= current
  battery.voltage >= voltage

  # Shipping is $0.5/lbs
  sub shipping = instance abstract mcdp {
    provides ships [g]
    requires postage [$]

    rate_USPS =     0.5 $ / lbs
    rate_NASA = 10000.0 $ / lbs
    rate = rate_USPS
    postage >= rate * ships
  }
  shipping.ships >= motor_chassis.total_weight


  # Minimization objectives:
  # 1) Minimize the cost
  requires cost [$]
  cost >= (motor_chassis.cost + battery.cost + MCB.cost 
           + autonomy.cost + shipping.postage + computation.cost)
  
  # 2) Also minimize the battery weight
  requires w >= battery.weight 

}