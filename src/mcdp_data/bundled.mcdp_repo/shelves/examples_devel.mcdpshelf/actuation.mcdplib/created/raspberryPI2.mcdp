mcdp {
    provides usbcom1 [`USBCom]
    provides usbcom2 [`USBCom]
    provides ethcom [`ETHCom]

    provides pisocketcom [`PISocketCom] 

    requires in [`PortableDCPower]

    ((required in).dc).connector >= `USB_connectors: USB_Micro_B_male
    ((required in).dc).voltage >= `DC_voltages: v5

    requires budget [$]
    required budget >= 30.00 $

    requires payload [`Payload]

    (required payload).mass >= 4 g # XXX
    (required payload).shape >= <0mm, 0mm, 0mm> # XXX

    
    # Com = finite_poset {}
    processor = instance template mcdp {
        provides com [`Com]
        requires com [`Com]
        requires flops [flops]
    }

    c0 = 100 mA
    c = 0.001 mA/flops
    amps = c0 + flops required by processor  * c

    socket_amps = (provided pisocketcom).amp_max
    ((required in).dc).amps >= amps + socket_amps

    processor.flops <= 1000 Mflops

    requires usbcom1 [`USBCom]
    requires gpiocom [`GPIOCom]
    
    requires ethcom [`ETHCom]


    route_in = instance template mcdp {
        provides pisocketcom [`PISocketCom]
        provides ethcom [`ETHCom]
        provides usbcom1 [`USBCom]
        provides usbcom2 [`USBCom]
        requires com [`Com] 
    }

    route_out = instance template mcdp {
        provides com [`Com]

        requires usbcom1 [`USBCom]
        requires ethcom [`ETHCom]
        requires gpiocom [`GPIOCom]
    }

    processor.com >= com required by route_in
    route_in.ethcom >= provided ethcom
    route_in.pisocketcom >= provided pisocketcom
    route_in.usbcom1 >= provided usbcom1
    route_in.usbcom2 >= provided usbcom2

    processor.com <= route_out.com 

    route_out.usbcom1 <= required usbcom1 
    route_out.ethcom <= required ethcom 
    route_out.gpiocom <= required gpiocom 

    endurance =  max( (provided ethcom).duration, (provided pisocketcom).duration, 
                      (provided usbcom1).duration, (provided usbcom2).duration  )

    (required in).duration >= endurance
    rigid_body1 = max((provided ethcom).rigid_body, (provided pisocketcom).rigid_body)
    rigid_body2 = max((provided usbcom1).rigid_body, (provided usbcom2).rigid_body)
    rigid_body = max(rigid_body1, rigid_body2)
    (required in).rigid_body >= rigid_body
    (required payload).rigid_body >= rigid_body 
    (required usbcom1).rigid_body >= rigid_body
    (required usbcom1).duration >= endurance
    (required gpiocom).rigid_body >= rigid_body
    (required gpiocom).duration >= endurance
    (required ethcom).rigid_body >= rigid_body
    (required ethcom).duration >= endurance
}
