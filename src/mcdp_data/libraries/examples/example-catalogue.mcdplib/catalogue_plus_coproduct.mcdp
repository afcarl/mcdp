 mcdp {

    simple_cell = catalogue {

        provides voltage [set-of(V)]
        provides capacity [J]

        requires cost [$]
        requires mass [kg]

        # These two have some functions, but
        # non-dominating resources
        model1 | {1.5 V} | 1 MJ |  5 $ | 0.20 kg
        model2 | {1.5 V} | 1 MJ | 15 $ | 0.10 kg
        # This one gives 5V; will need an adapter
        model3 | {5.0 V} | 1 MJ |  5 $ | 0.30 kg

    }

    cell_plus_converter = mcdp {
        provides voltage [set-of(V)]
        provides capacity [J]
        requires cost [$]
        requires mass [kg]

        converter = instance catalogue {
            provides voltage_out [set-of(V)]
            requires voltage_in  [set-of(V)]
            requires cost [$]
            requires mass [g]

            step_up1 |{5  V}      | {1.5 V} | 5 $  | 20 g
            step_up2 |{12 V}      | {1.5 V} | 10 $ | 20 g
            step_up2 |{12 V, 5 V} | {1.5 V} | 10 $ | 20 g
        }

        cell = instance simple_cell

        voltage <= converter.voltage_out
        converter.voltage_in <= cell.voltage
        mass >= cell.mass + converter.mass
        cost >= cell.cost + converter.cost
        capacity <= cell.capacity
    }

    battery = instance choose(simple: simple_cell, converter: cell_plus_converter)
    requires cost, mass for battery
    provides voltage, capacity using battery
}
