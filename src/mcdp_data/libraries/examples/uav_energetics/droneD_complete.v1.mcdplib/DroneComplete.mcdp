mcdp {  
  provides travel_distance [km]
  provides num_missions [dimensionless]
  provides carry_payload [g]

  requires total_cost_ownership [$]

  strategy = instance mcdp {
    provides distance [km]
    requires endurance [s]
    requires velocity [m/s]

    distance <= endurance * velocity
  }

  ae = instance `ActuationEnergetics

  ae.endurance >= strategy.endurance
  ae.velocity >= strategy.velocity
  ae.num_missions >= num_missions
  ae.extra_payload >= carry_payload
  strategy.distance >= travel_distance

  computer = instance `Computer

  perception = instance template mcdp {
    provides velocity [m/s]
    requires computation [flops]
    requires camera_framerate [Hz]
    requires camera_resolution [pixels/deg]
    requires camera_fov [deg]
  }
  computer.computation >= perception.computation


  sensor = instance template mcdp {
    provides framerate [Hz]
    provides resolution [pixels/deg]
    provides fov [deg]
    requires power [W] 
  }

  sensor.resolution >= perception.camera_resolution
  sensor.framerate >= perception.camera_framerate
  sensor.fov >= perception.camera_fov
  
  perception.velocity >= strategy.velocity
  ae.extra_power >= computer.power + sensor.power

  # We can take into account the shipping cost
  shipping = instance  `Shipping  
  
  total_mass = total_mass required by ae

  shipping.ships >= total_mass

  total_cost_ownership >= postage required by shipping + total_cost required by ae
}