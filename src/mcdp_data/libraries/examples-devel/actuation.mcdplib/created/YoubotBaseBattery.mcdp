mcdp {
     provides out1 [`PortableDCPower]
     provides out2 [`PortableDCPower]
     provides out3 [`PortableDCPower]

     requires in [`DC_Charging]

     dc = (required in).dc
     (dc).connector >= `barrel_connectors: Neutrik_NC4MXX
     (dc).voltage >= `DC_voltages: v5
     (dc).amps >= 2 A

     dc1 = (provided out1).dc
     dc2 = (provided out2).dc
     dc3 = (provided out3).dc

     (dc1).connector <= `barrel_connectors: Neutrik_NC4MXX
     (dc1).voltage <= `DC_voltages: v5
     amp1 = (dc1).amps

     (dc2).connector <= `barrel_connectors: Neutrik_NC4MXX
     (dc2).voltage <= `DC_voltages: v5

     amp2 = (dc2).amps 

     (dc3).connector <= `barrel_connectors: Neutrik_NC4MXX
     (dc3).voltage <= `DC_voltages: v5

     amp3 = (dc3).amps 


     amp1 + amp2 + amp3 <= 2 A

     (provided out1).duration <= 2 hour
     (provided out2).duration <= 2 hour
     (provided out3).duration <= 2 hour

     (required in).duration >= 2 hour
     
     # same rigid body
     #max( (provided out1).rigid_body,  (provided out2).rigid_body) <= any-of({ `RigidBodyID: rb1, `RigidBodyID: rb2, `RigidBodyID: rb3})
     rb1 = max( (provided out1).rigid_body,  (provided out2).rigid_body) 
     rb2 = (provided out3).rigid_body
     rb = max(rb1, rb2)
     rb <= any-of(Minimals `RigidBodyID)
     # 

}