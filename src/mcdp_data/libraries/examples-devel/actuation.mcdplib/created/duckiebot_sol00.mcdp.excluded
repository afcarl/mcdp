mcdp {     
    requires ac [`AC_charging]
    provides motion [`Motion]

    dagu_chassis = instance `DaguChassis
    provided motion <= dagu_chassis.motion 
    battery_ravpower = instance `BatteryRavpower

    pi = instance `RaspberryPI2
    dc_hat = instance `AdafruitDCHat0
    USBMicroCharging= instance `USBMicroCharging

    requires pwm >= dagu_chassis.pwm1
    
    dagu_chassis.pwm1 <= dc_hat.out1
    dagu_chassis.pwm2 <= dc_hat.out2
    ignore out3 provided by dc_hat
    ignore out4 provided by dc_hat
    ignore usbcom1 provided by pi
    ignore usbcom2 provided by pi

    usb_to_barrel = instance `USB_to_barrel
    usb_a_to_micro = instance `USB_A_to_micro_B_cable

    dc_hat.pisocketcom1 <= pi.pisocketcom
    dc_hat.in <= usb_a_to_micro.out

    usb_a_to_micro.in <= battery_ravpower.out2

    ignore ethcom provided by pi 
    pi.ethcom <= Top `EthCom
    pi.usbcom1 <= Top `USBCom
    pi.gpiocom <= Top `GPIOCom

    pi.in <=  usb_to_barrel.out

    battery_ravpower.in <= USBMicroCharging.out
    usb_to_barrel.in <= battery_ravpower.out1

    battery_ravpower.payload <= dagu_chassis.payload_bottom

    assign_id = instance abstract `RigidBodyAssignID
    dagu_chassis.rb_id <= assign_id.id1

    add_budget = instance abstract mcdp {    
        provides budget1 [USD]
        provides budget2 [USD]
        provides budget3 [USD]
        provides budget4 [USD]
        provides budget5 [USD] 
        provides budget6 [USD]
        provides budget7 [USD]

        requires budget [USD]

        required budget >= (
            provided budget1 + 
            provided budget2 +
            provided budget3 +
            provided budget4 +
            provided budget5 +
            provided budget6 +
            provided budget7
        )
    }

    dagu_chassis.budget <= add_budget.budget1
    battery_ravpower.budget  <= add_budget.budget2
    pi.budget <= add_budget.budget3
    dc_hat.budget <= add_budget.budget4
    USBMicroCharging.budget <= add_budget.budget5
    usb_to_barrel.budget <= add_budget.budget6
    usb_a_to_micro.budget <= add_budget.budget7

    requires budget >= budget required by add_budget

    required ac >= USBMicroCharging.in


  fit = instance template mcdp {
      provides p1 [`Payload]
      provides p2 [`Payload]
      #provides p3 [`Payload]
      #provides p4 [`Payload]
      #provides p5 [`Payload]
      #provides p6 [`Payload]
      #provides p7 [`Payload]
      requires payload [`Payload]
  }

    pi.payload <= fit.p1
    dc_hat.payload <= fit.p2

    fit.payload <= dagu_chassis.payload_top
}