mcdp {
   provides out [`PortableDCPower]
   provides usbcom [`USBCom]
   provides motion [`Motion]
   provides payload [`Payload]

   requires budget [USD]
   

   (provided motion).velocity <= 5 m/s
   required budget >= 10000 USD

   computer = instance `YoubotBaseComputer 

   provided usbcom <= usbcom provided by computer 

   battery = instance `YoubotBaseBattery

   mass = (provided payload).mass
   shape = (provided payload).shape
 

   endurance1 = max( (provided usbcom).duration, (provided motion).endurance)
   #endurance2 = (provided out).duration

#   (provided out).dc
   
   endurance = endurance1
   # max(endurance1, endurance2)

   motors = instance mcdp {
      provides endurance [s]
      requires in [`PortableDCPower]
   }

   motors.endurance >= endurance

   in required by motors  <= out3 provided by battery

  # limit x and y
   shape <= <30cm, 50cm, 50cm>
   
   mass <= 10 kg

   out1 provided by battery >= dc required by computer
   out2 provided by battery >= provided out
 
   requires in for battery
}