mcdp {
   provides dc [`DC_power]
   provides computation [flops]
   provides motion [`Motion]
   provides payload [`Payload]

   requires budget [USD]
   requires ac [`AC_power]
   provides endurance [`Endurance]
   requires charging_time [`ChargingTime]

   (provided motion).velocity <= 5 m/s
   budget >= 10000 USD

   computer = instance template mcdp {
     provides computation [flops]
     requires dc [`DC_power]
      # todo
   }
   provided computation <= computation provided by computer

   battery = instance template mcdp {
     provides dc1 [`DC_power]
     provides dc2 [`DC_power]
     provides endurance [`Endurance]
     requires charging_time [`ChargingTime]
     requires ac [`AC_power]
     # todo
   }
   mass = (provided payload).mass
   shape = (provided payload).shape
 
  # limit x and y
   take(shape, 0) <= 30m
   take(shape, 1) <= 50cm

   mass <= 10 kg

   endurance provided by battery >= provided endurance
   dc1 provided by battery >= dc required by computer
   dc2 provided by battery >= provided dc
   charging_time required by battery <= required charging_time
   ac required by battery <= required ac        
}