mcdp {
     requires power [W]
     requires budget [USD]
     requires mass [g]

     provides resolution [pixels/deg]
     provides min_throughput [Hz]
     provides inverse_of_max_latency [1/s] 

     # fit of latency as a function of resolution
     l0 = 0.2 s
     l1 = 0.1 s * deg / pixels
     l2 = 0.1 s * deg^2 / pixels^2
     r = provided resolution
     latency = l0 + l1 * r + l2 * r^2

     # fit latency as a function of resolution
     u0 = 0.20000 dimensionless
     u1 = 0.10000 deg / pixels
     u2 = 0.10000 deg^2 / pixels^2
     usage = u0 + u1 * r + u2 * r^2
   
     # usage cannot go over100%
     usage <= 100 dimensionless

     # Constraint for throughput:
     #      latency <= 1 / min_throughput
     # rewritten as:
     min_throughput * latency <= 1 dimensionless 
     
     # Constraint for latency:
     #     latency <= max_latency
     # rewritten as:
     latency * inverse_of_max_latency <= 1 dimensionless

     # compute power consumption using linear interpolation
     power_rest = 1 W
     power_max = 2 W
     power = power_rest + (power_max-power_rest) * usage / 100 dimensionless
     required power >= power

     required budget >= 120 USD
     required mass >= 50g
}