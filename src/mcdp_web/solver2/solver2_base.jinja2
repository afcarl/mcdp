<!DOCTYPE html>
<html lang="en">

<!--  2,3 http://127.0.0.1:8080/libraries/basic/models/prod2r/views/solver2/#eyJhcmVhX0YiOiIiLCJhcmVhX1IiOiIiLCJmdG9yX2NoZWNrYm94Ijp0cnVlLCJydG9mX2NoZWNrYm94IjpmYWxzZSwiZG9fYXBwcm94aW1hdGlvbnMiOnRydWUsIm51IjoyLCJubCI6bnVsbH0=
http://127.0.0.1:8080/libraries/basic/models/prod2r/views/solver2/#eyJhcmVhX0YiOiIiLCJhcmVhX1IiOiIiLCJmdG9yX2NoZWNrYm94Ijp0cnVlLCJydG9mX2NoZWNrYm94IjpmYWxzZSwiZG9fYXBwcm94aW1hdGlvbnMiOnRydWUsIm51IjoyLCJubCI6OX0=
-->
<head>
    <title>Interactive solver</title>

    {% include 'head.jinja2' %}
	<style type='text/css'>
	  .output_error {font-size: smaller; color: red; font-weight: bold; }

    .output_error, .output_success {
        /* at most 100 chars (approximately) */
        white-space: pre-wrap;
        word-wrap: break-word;
        width: 100ex;
    }
    img#compact_graph {
      /*max-width: 50%;*/
      /*max-width: 35ex;*/
      /*float: right ;*/
      /*margin-right: 10ex;*/
    }

    #slider-ln { width: 10em; }
    #slider-un { width: 10em; }

  #F_cell {color: darkgreen;}
  #R_cell {color: darkred;}
  #area_F { color: darkgreen;  font-family: Courier, monospace; font-size: 80%;}
  #area_R { color: darkred;  font-family: Courier, monospace; font-size: 80%;}
  .Ftext {color: darkgreen;}
  .Rtext {color: darkred;}
  .Itext {color: darkorange;}
  table#params {
      display:inline-block;
  }
  table#params td:first-child {
      vertical-align: top;
      font-weight: bold;
      padding-right: 12pt;
      white-space : nowrap;

  }
  table#params td:first-child, table#params label, #F_label, #R_label {
    /*text-align: right;*/
    font-size: 80%;
  }
   table#params label {text-align:left;}
  fieldset { border: none; padding: 0; margin: 0; }

  h2 { font-size: 100%; margin-bottom: 0; margin-left: 0.5em;}
  table#params {padding-top: 1em; /* for h2 trick above */}

  div#query_box {
        border: solid 1px #ddd; padding: 1em;

   }
  div#query_box p#par_image {
      margin: 0; padding:0;
      text-align: center;
  }

  label { border: 0 !important; background-color: white !important;
      color: black !important;
      font-weight: normal !important;
      max-width: 34em;
      margin-bottom: 3pt;
    }

  img#problem_icon {height: 7em;}

  .not-implemented { color: gray; font-weight:normal;}
	</style>
</head>
<body>
	{% include 'model_views_navigation.jinja2' %}
    <h2>Query</h2>

  <div id='query_box'>
      <p id='par_image'>
  <img src='compact_graph.svg' id='compact_graph'/>
</p>
  <table id='params'>
  <tr>
    <td>
        Choose query type:
    <td>
    <!-- <p  id='query-type-label' valign='top'>Query type</p> -->
      <fieldset class='query_type'>
      <label for="ftor_checkbox">
        <span class='Ftext'>Fixed the functionality</span>,<br/>
        <span class='Rtext'>minimize the resources</span>.
      </label>
      <input type="radio" name="query-type" id="ftor_checkbox" checked="checked">

      <label for="rtof_checkbox">
        <span class='Rtext'>Fixed the resources</span>,<br/>
        <span class='Ftext'>maximize the functionality</span>.
      </label>
      <input type="radio" name="query-type" id="rtof_checkbox">
      <br/>
      <label for="itofr_checkbox">
        Given an <span class='Itext'>implementation</span>,<br/>evaluate <span class='Ftext'>functionality</span>/resources.
        <span class='not-implemented'>[not implemented]</span>
      </label>
      <input type="radio" name="query-type" id="itofr_checkbox" >
      <br/>

      <label for="existsi_checkbox">
          Given  <span class='Ftext'>min functionality</span> and
          <span class='Rtext'>max resources</span>,<br/>
          determine if there is a <span class='Itext'>feasible implementation</span>.
          <span class='not-implemented'>[not implemented]</span>
        </label>
      <input type="radio" name="query-type" id="existsi_checkbox"  >
      <br/>

      <label for="frtoi_checkbox">
          Given <span class='Ftext'>min functionality</span> and
          <span class='Rtext'>max resources</span> and max resources,<br/> find a
        <span class='Itext'>feasible implementation</span>.
        <span class='not-implemented'>[not implemented]</span>
      </label>
      <input type="radio" name="query-type" id="frtoi_checkbox"  >
      <br/>

      <label for="solveforx_checkbox">
          "Solve for X": find the minimal component that makes the co-design problem feasible.
          <span class='not-implemented'>[not implemented]</span>
      </label>
      <input type="radio" name="query-type" id="solveforx_checkbox" >
    </fieldset>
    <br/>
    <img id='problem_icon' src='{{root}}/static/white_small.png'/>
    </td>
  </tr>
  <tr id='row-fun'>
    <td>
        Enter  <span class='Ftext'>functionality</span>:
    </td>
    <td id='F_cell'>
      <span id='F_label'>{{F_names}}<br/> {{F_description}}</span><br/>
      <textarea id="area_F" cols=45 rows=5/></textarea>
    </td>
  </tr>

  <tr id='row-res'>
    <td>
        Enter <span class='Rtext'>resources</span>:
    </td>
   <td id='R_cell'>
      <span id='R_label'>{{R_names}}<br/> {{R_description}}</span><br/>
      <textarea id="area_R" cols=45 rows=5/></textarea>
    </td>
  </tr>

  <tr>
    <td></td><td>
        <fieldset>
            <input type="checkbox" name="do_approximations_x" id="do_approximations"/>
            <label for="do_approximations_x">Use finite approximations
              to infinite antichains</label>

        </fieldset>
    </td>
  </tr>
  <tr>
    <td valign='top' id='approx_cell'></td>
      <!-- <fieldset> -->


    <td id='approx_params'>
      <table>
        <tr>
          <td>
          Upper bound complexity
          </td>

          <td>
            <input type="spinner" id="spinner-un" value='1'/>
          </td>

        </tr>
        <tr>
          <td>
            Lower bound complexity
          </td>
          <td>
            <input type="spinner" id="spinner-ln" value='1'/>
          </td>
        </tr>
      </table>
    </td>
  </tr>

  <tr><td></td>
    <td>
        <fieldset>
            <input type="checkbox" name="draw_implementations" id="draw_implementations"/>
            <label for="draw_implementations">Draw diagram for implementations</label>
        </fieldset>
    </td>
  </tr>

</table>
</div> <!-- query box -->

  <pre class='output_error' id='output_error'></pre>
  <pre class='output_success' id='output_result'></pre>

  <img id='output_img' src="{{root}}/static/white.png" style='width: 20em; height: 20em'/>

  <p>{{space_description}}</p>

  <pre class='output_success' id='output_parsed'></pre>
  <pre class='output_success'  id='output_format'></pre>
  <pre class='output_success' id='output_space'></pre>
  <pre class='output_success' id='output_trace'></pre>

  <pre class='output_success' id='output_raw'></pre>
  <pre class='output_success' id='output_formatted'></pre>


  <pre class='output_error' id='ajax_error'></pre>
  </div>


  <script type="text/javascript">
    var timeoutID = null;
    var wait_ms = 1000;

    function call_after_pause(func, ms) {
      if (timeoutID != null)
        window.clearTimeout(timeoutID);

      timeoutID = window.setTimeout(func, ms);
    }

  </script>




<script type="text/javascript">

function ajax_begin() {
	S('#operation_error').html('sending...');
}

function ajax_success(data) {
    if (data['ok']) {
    	console.log('ok');
        console.log(data);
        S('.output_error').html('');

        S('#output_raw').html(data['output_raw']);
        S('#output_formatted').html(data['output_formatted']);
        S('#output_parsed').html(data['output_parsed'])
        S('#output_space').html(data['output_space'])
        S('#output_result').html(data['output_result'])
        S('#output_trace').html(data['output_trace'])

        S('#output_img').attr("src",data['output_image']);

    } else {
    	console.log(data);
    	S('.output_success').html('');

        error = data['error']
    	console.log(error);

    	S('#output_error').html(error);
      // S('#output_img').attr("src",'{{root}}/static/error.png');
      S('#output_img').attr("src",'{{root}}/static/white_small.png');
	}
}

function ajax_failure(error) {
	console.log(error);
	S('.output_success').html();
	S('#ajax_error').html(error);
}

function evaluate() {

    ui_state = get_ui_state();

    areaF = S('#area_F').val();
    areaR = S('#area_R').val();
    areaF = areaF.replace(/\s/g, "");
    areaR = areaR.replace(/\s/g, "");

    if(ui_state['ftor_checkbox'] && areaF.length == 0)
      return;

    if(ui_state['rtof_checkbox'] && areaR.length == 0)
      return;

    S('#output_img').attr("src",'{{root}}/static/evaluating.gif');


    payload = {'ui_state': ui_state};
    jQuery.ajax({
        url     : 'submit',
        type    : 'POST',
        data: JSON.stringify(payload),
        contentType: 'application/json; charset=utf-8',
        success : ajax_success,
        error : ajax_failure
    });
}
var problems = ['ftor', 'rtof', 'solveforx',
'frtoi', 'existsi', 'itofr']

var checkboxes = ['ftor_checkbox', 'rtof_checkbox', 'solveforx_checkbox',
'frtoi_checkbox', 'existsi_checkbox', 'itofr_checkbox']

function get_ui_state() {
  state = {};
  state['area_F'] = S('#area_F').val();
  state['area_R'] = S('#area_R').val();
  for(c of checkboxes) {
        state[c] = S("#"+c).is(':checked');
  }

  // state['rtof_checkbox'] = S("#rtof_checkbox").is(':checked');
  state['do_approximations'] = S("#do_approximations").is(':checked');

  state['nu'] = S('#spinner-un').spinner('value');
  state['nl'] = S('#spinner-ln').spinner('value');
  console.log('just read ln ' +state['nl']);
  console.log('just read un ' +state['nu']);
  return state;
}

function save_as_hash() {
  console.log('save_as_hash()');
  state = get_ui_state();
  state_s = JSON.stringify(state);
  console.log('setting to ' + state_s);
  hash = btoa(state_s);

  document.location.hash = hash; // XXX: encode
}

function set_state_from_hash() {
    console.log('set_state_from_hash()');
    hash = document.location.hash;
    // console.log('hash ' + hash);
    if (hash && hash.length>1) {
      string = hash.substring(1);
      try {
        state_s = atob(string);
        state = JSON.parse(state_s);
      } catch (e) {
        alert('Cannot decode hash.')
        document.location.hash='';
      }
      console.log('set_state_from_hash(): using state ' + JSON.stringify(state));
      S('#area_F').val(state['area_F']);
      S('#area_R').val(state['area_R']);
      S('#ftor_checkbox').prop("checked", state['ftor_checkbox']).checkboxradio("refresh");
      S('#rtof_checkbox').prop("checked", state['rtof_checkbox']).checkboxradio("refresh");
      S('#do_approximations').prop("checked", state['do_approximations']);
      S('#spinner-un').spinner('value', state['nu']);
      S('#spinner-ln').spinner('value', state['nl']);
      console.log('set_state_from_hash(): setting ln to ' +state['nl']);
      console.log('set_state_from_hash(): setting un to ' +state['nu']);
    }
    update_ui();
}


  /* Ensure $ returns at least 1 element */
  function S(selector) {
      x = $(selector);
      if (x.length === 0)
          throw "Empty jQuery result for " + selector;
      return x;
  }

  function save_hash_and_call() {
    save_as_hash();
    call_after_pause(evaluate, wait_ms);
  }

  $( function() {
    S( "input[type=radio]" ).checkboxradio();
    // $( "input[type=checkbox]" ).checkboxradio();
    for(c of checkboxes) {
          S("#"+c).change(update_ui);
          S("#"+c).change(save_hash_and_call);
    }

    S('#do_approximations').change(update_ui);


    S( "#spinner-un" ).spinner({'min': 1, 'numberFormat': "n", 'spin': save_hash_and_call});
    S( "#spinner-ln" ).spinner({'min': 1, 'numberFormat': "n", 'spin': save_hash_and_call});
    update_ui();

    S('#area_F').on('inputchange', function() {
        save_as_hash();
        call_after_pause(evaluate, wait_ms);
    });
    S('#area_R').on('inputchange', function() {
        save_as_hash();
        call_after_pause(evaluate, wait_ms);
    });
    S('#do_approximations').on('change', function() {
      save_as_hash();
      call_after_pause(evaluate, wait_ms);
    });

    set_state_from_hash();

  } );

  function mark(which, enabled) {
    if (enabled) {
      S(which).prop('disabled', false);
      S(which).css('background-color', 'white');
    } else {
      S(which).prop('disabled', true);
      S(which).css('background-color', 'lightgrey');
    }
  }

  function update_ui() {
    console.log('update_ui()');

    for(p of problems) {
        cb = '#' + p + '_checkbox';
        if (S(cb).is(':checked')) {
            image = '{{root}}/static/' + p + '.png';
            S('#problem_icon').attr("src", image);
        }
    }

    if( S("#ftor_checkbox").is(':checked') ){
      mark('#area_F', true);
      mark('#area_R', false);
      S('#row-res').hide();
      S('#row-fun').show();
    }
    if( S("#rtof_checkbox").is(':checked') ){
      mark('#area_F', false);
      mark('#area_R', true);
      S('#row-res').show();
      S('#row-fun').hide();
    }

    if( S("#do_approximations").is(':checked') ){
      S("#approx_params").show();
      console.log('checked');
    } else {
      S("#approx_params").hide();
      console.log('not checked');
    }

  }


  </script>

</body>
</html>
