<!DOCTYPE html>

<html lang="en">
  <head>
  	{% include 'head.jinja2' %}
  	
    <style type="text/css">
    #syntax_error {
    	font-weight: bold;
    	font-size: smaller;
    	color: red;
    }
    #error_notice {
    	color: red;
    }

	#editor {
		font-size: 80%;
		width: 40em;
	}

	#around_editor {margin: 0; padding: 0.5em;}
	#around_editor pre { margin: 0; padding: 0.4em; background-color: #f4f4f4;}
	code#editor { outline: 0px solid transparent; }

    </style>
  </head>
  
  <body>
  	{% include 'model_views_navigation.jinja2' %}
  
  
  <style type='text/css'>
  	table td { vertical-align: top; }
  	html, body { height: 100%; border: solid 0px red; padding: 0; margin: 0; }
  </style>
  
  <table style='width: 100%; border: solid 0px black'>
  <tr style=''><td style=' border: solid 0px gray; width: 50%'>
	  <div id='around_editor'>
	  	<pre ><code contenteditable="true" id='editor'>{{source_code|safe}}</code></pre>
	  </div>
  </td>

	<td style='border: solid 0px gray; text-align: center'>
	  <div style='height: 100%; border: solid 0px yellow'>
	  	<img id='graph' src='graph.png' style='max-height: 20em; max-width: 100%'/>
	  </div>
  	</td>
  </tr>

  <tr>
  <td>
    <div id='commands'>
  	<button id='save'>Save</button>
  	<button id='discard'>Discard</button>
  	<!-- <br/> -->
  	
  </div>
<td>
</td>
<tr>
<td colspan=2>
<span id='save_status'></span>
  	<span id='server_status'></span>
  <pre id='syntax_error'></pre>
  <pre id='comm_failure'></pre>
  </td></tr>
 
  </table>
  


  
	
<script type='text/javascript'>
	var last_text_sent_to_server = null;
	var last_rendered_text = null;
	var timeoutID = null;
	var parsing_wait_ms = 400;
	// var image_refresh_interval_ms = 5000

	$(document).ready(function() {

		$("#editor").keyup(keyup);
		$( "button#save" ).click(click_button_save);
		$( "button#discard" ).click(click_button_discard);

	    try_to_parse(current_text());
	});

	function current_text() {
		text = $("#editor").text();
		return text;
	}

	function keyup() {
		/* We do not ask for parsing every time a key is pressed */
		text = current_text();
		
		// do not do it twice
		if (text == last_rendered_text)
			return; 
		if (text == last_text_sent_to_server)
			return;

		$('button#save').disable();
		$('#around_editor').css('background-color', '#ffe');
		
		// and we wait that the user stops editing
		if (timeoutID != null){
			window.clearTimeout(timeoutID);
		}

		timeoutID = window.setTimeout(try_to_parse_it, parsing_wait_ms);
	}


	function try_to_parse_it() {
		text = current_text();
		
		element = $('#editor').get(0);
		
		try_to_parse(text);
		update_image();
	}

	function on_comm_failure(error) {
		console.log('AJAX error');
		console.log(error);
		$('#comm_failure').html(error);
	}

	function update_text(highlight, pos) {
	
		$("#editor").html(highlight);
		
		editor = $("#editor").get(0);
		elements = get_elements(editor);

		if (pos >= elements.length) {
			pos = elements.length - 1;
			textNode = elements[pos]['text'];
			caret = elements[pos]['char'] + 1
		} else {
			e = elements[pos];
			textNode = e['text'];
			caret = e['char'];
				
			if (e == null) {
				console.log('Could not find element at range ' + pos);
				console.log(elements);
			}
		}
		
		var range = document.createRange();
		range.setStart(textNode, caret);
		range.setEnd(textNode, caret);
		var sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(range);
	}


	function update_text_with_highlight(req_text, highlight) {
		// never change the user input!
		pos = getCaretCharacterOffsetWithin($("#editor").get(0));
		if (pos == null){
			console.log('Cannot get element cursor.');
			pos = 0;
		}
		last_rendered_text = req_text;

		update_text(highlight, pos);	
	}

	function still_relevant(req_text) {
		text = current_text();
		return req_text == text;
	}

 	function multiple_selection() {
 		// Returns true if the user is selecting an area
 		// So that we don't replace the text below 

 		function getSelectedText() {
		    var text = "";
		    if (typeof window.getSelection != "undefined") {
		        text = window.getSelection().toString();
		    } else if (typeof document.selection != "undefined" && document.selection.type == "Text") {
		        text = document.selection.createRange().text;
		    }
		    return text;
		}
		text = getSelectedText();
		return text.length  > 0;
 	}

	function try_to_parse(s) {
		//console.log(JSON.stringify(s));

		function on_proc_failure(res) {
			console.log(res['error']);
			$('#syntax_error').html(res['error']);
			//$('#syntax_error').show();
			$('#around_editor').css('background-color', '#fee');
			$('button#save').text('Save (even though there are errors)');
			$('button#save').enable();

			if ('highlight' in res) {
				relevant = still_relevant(res['request']['text']);

				if (relevant)
					update_text_with_highlight(res['request']['text'], res['highlight']);
				else {
					show_status('#server_status', 'Server is slow in responding...');
				}
			}
		}	

		function on_success(res) {
			relevant = still_relevant(res['request']['text']);

			if (!relevant || (res['request']['text'] != last_text_sent_to_server)) {
				//console.log('Slow server: ignoring stale.');
				show_status('#server_status', 'Server is slow in responding...');
				return;
			}

			if(multiple_selection())
				return;

			$('#around_editor').css('background-color', 'white');
			$('#syntax_error').html('');
			$('button#save').text('Save');
			$('button#save').enable();

			update_text_with_highlight(res['request']['text'], res['highlight']);
		}

		last_text_sent_to_server = s;
		ajax_send("ajax_parse", {'text': s}, on_comm_failure, on_proc_failure, on_success);
	}

	function click_button_discard(res) {
		location.reload();
	}

	function click_button_save() {
		$('#save_status').html('saving...');
		data = {'text': current_text()};
		ajax_send("save", data, on_comm_failure, 
				  click_button_save_failure, click_button_save_success);
	}
	
	function click_button_save_success(res) {
		show_status('#save_status', 'success');
		console.log('success');
		console.log(res);
	}

	function click_button_save_failure(res) {
		show_status('#save_status', 'failed');
		console.log('failure');	
		console.log(res);
	}

	display_timeout = 2000;

	function show_status(selector, msg) {
		$(selector).html(msg);
		window.setTimeout(function() {
				$(selector).html('');
			},
			display_timeout);
	}

	function update_image() {
		text = current_text();
		hash = hex_sha1(text);
		$("img#graph").attr("src", "graph.png?"+hash);		
	}
	// setInterval(function() {
	// 	//d = new Date();
	// }, image_refresh_interval_ms);

	</script>
  
  </body>
</html>